" 基本设置 {{{
set nu
" set rnu

" {{{ 会导致整个 buffger 重新绘制
" set rnu
" set cursorcolumn
" set cursorline
" }}}
set ignorecase
set incsearch
set smartcase
set showmatch
set autoindent
set noerrorbells
set vb t_vb=
set showcmd
set tabstop=4
set softtabstop=4
set shiftwidth=4
" set expandtab
set backspace=2
" set laststatus=2
" set cmdheight=2
" 设置自动换行 {{{
set nowrap "不换行
" set wrap
" set formatoptions=l
" set lbr
" set cc=120
" set textwidth=120
" }}}
set mouse=a
set autoread
set hlsearch
set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8,gbk,gb2312,chinese,cp936
" tmux 显示粗和斜体
set t_ZH=^[[3m
set t_ZR=^[[23m

if has('termguicolors')
	set termguicolors
endif


filetype plugin indent on
syntax enable

"if has("cscope")
"  set cscopetag
"  set csto=0
"  if filereadable("cscope.out")
"    cs add cscope.out
"  elseif $CSCOPE_DB != ""
"    cs add $CSCOPE_DB
"  endif
"endif

let mapleader=','
let maplocalleader=','

inoremap jk <esc>
" 复制到剪贴板和粘贴剪贴板内容
map Y "+y
map P "+p

augroup Self_def_cmds
	autocmd!
	" 打开vim时，光标移动到上次退出时的位置 {{{
	autocmd bufreadpost * if line("'\"") > 1 && line("'\"") <= line("$") && &ft !=# 'commit'
				\ | execute "normal! g`\""
				\ | endif
	" }}}


" c 家族语言不使用空格代替 tab， noet = noexpandtab。
" autocmd filetype c,C,cpp,Cpp,cxx,c++,h,hpp,hxx set noet

" tab 保持 8 个字符的距离，不再使用空格代替，由于 python
" 语法的问题，需要继续保留
" autocmd filetype python set tabstop=4
" autocmd filetype python set softtabstop=4
" autocmd filetype python set shiftwidth=4
" autocmd filetype python set expandtab
augroup end

" 映射<leader>ev，纵向分屏打开vimrc文件
nnoremap <Leader>ev :vsplit $MYVIMRC<cr>
" 映射<leader>sv, 使vimrc立即生效
nnoremap <leader>sv :source $MYVIMRC<cr>

" 使用 ctrl + hjkl 上下左右切换 vim 窗口
noremap <C-j> <C-W>j
noremap <C-k> <C-W>k
noremap <C-h> <C-W>h
noremap <C-l> <C-W>l

" }}}

" plug {{{
call plug#begin('~/.vim/plugged')
Plug 'morhetz/gruvbox'
Plug 'sainnhe/gruvbox-material'
Plug 'lifepillar/vim-solarized8'
Plug 'dracula/vim', { 'as': 'dracula' }

Plug 'mhinz/vim-startify'

Plug 'preservim/tagbar'

Plug 'honza/vim-snippets'

Plug 'neoclide/coc.nvim', {'branch': 'release'}

" 给ccls用的语法高亮
Plug 'jackguo380/vim-lsp-cxx-highlight'

" 给相同单词加下划线
Plug 'itchyny/vim-cursorword'

" 高亮单词 <leader>k 高亮，<leader>K 清除高亮
Plug 'lfv89/vim-interestingwords'

" 显示启动时间,命令:StartupTime
Plug 'dstein64/vim-startuptime'

" <ENTER>选中括号中的内容
Plug 'gcmt/wildfire.vim'

Plug 'jiangmiao/auto-pairs'

" vim 中文文档
Plug 'yianwillis/vimcdoc'

" 显示空白字符
Plug 'ntpeters/vim-better-whitespace'
" 显示tab，enter等
" Plug 'tjdevries/cyclist.vim'

Plug 'ryanoasis/vim-devicons'

" markdown
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'

" 缩进提示
Plug 'Yggdroot/indentLine'

" 运行代码
" Plug 'michaelb/sniprun', {'do': 'bash install.sh'}

if has("nvim")
	Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
	" Plug 'nvim-treesitter/nvim-treesitter-refactor'
	" Plug 'nvim-treesitter/playground'
	" Plug 'romgrk/nvim-treesitter-context'
	Plug 'hoob3rt/lualine.nvim'
	Plug 'kyazdani42/nvim-web-devicons'

	Plug 'nvim-lua/popup.nvim'
	Plug 'nvim-lua/plenary.nvim'
	Plug 'nvim-telescope/telescope.nvim'

	Plug 'b3nj5m1n/kommentary'

	" Plug 'lukas-reineke/indent-blankline.nvim'
endif

Plug '~/tmp/vim-test-plug'

call plug#end()
" }}}


" gruvbox settings {{{
" set background=light

" set background=dark
" let g:gruvbox_material_background = 'hard'
" colorscheme gruvbox-material
" let g:gruvbox_material_diagnostic_text_highlight = 1
" let g:gruvbox_material_diagnostic_line_highlight = 1
" let g:gruvbox_material_diagnostic_virtual_text = 'colored'
"}}}

" markdown settings {{{
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_folding_style_pythonic = 1
let g:vim_markdown_folding_level = 6
let g:vim_markdown_conceal = 0
" }}}

" tagbar settings {{{
nmap <space>t :TagbarToggle<CR>
let g:tagbar_iconchars = ['▶', '▼']

let g:tagbar_scopestrs = {
	\    'class': "\uf0e8",
	\    'const': "\uf8ff",
	\    'constant': "\uf8ff",
	\    'enum': "\uf702",
	\    'field': "\uf30b",
	\    'func': "\uf794",
	\    'function': "\uf794",
	\    'getter': "\ufab6",
	\    'implementation': "\uf776",
	\    'interface': "\uf7fe",
	\    'map': "\ufb44",
	\    'member': "\uf02b",
	\    'method': "\uf6a6",
	\    'setter': "\uf7a9",
	\    'variable': "\uf71b",
	\ }
" }}}

" coc.nvim settings {{{
" coc-jedi 依赖 jedi-language-server 自行安装
" pip3 install -U jedi-language-server
let g:coc_global_extensions = [
    \ 'coc-json',
    \ 'coc-vimlsp',
	\ 'coc-pyright',
    \ 'coc-snippets',
    \ 'coc-syntax',
    \ 'coc-yaml',
	\ 'coc-highlight',
	\ 'coc-explorer',
	\ 'coc-go',
	\ 'coc-sumneko-lua',
	\ 'coc-clangd']

" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
" set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=100

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [d <Plug>(coc-diagnostic-prev)
nmap <silent> ]d <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
" autocmd CursorHold * silent call CocActionAsync('highlight')

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  " autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" 目录🌲，替代nerdtree , 使用 l 和 h 打开和关闭目录，使用 j 和 k 上下移动，使用 enter 进入目录
nnoremap <space>e :CocCommand explorer<CR>

" coc-snippets settings {
" Use <C-l> for trigger snippet expand.
imap <C-l> <Plug>(coc-snippets-expand)

" Use <C-j> for select text for visual placeholder of snippet.
vmap <C-j> <Plug>(coc-snippets-select)

" Use <C-j> for jump to next placeholder, it's default of coc.nvim
let g:coc_snippet_next = '<c-j>'

" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
let g:coc_snippet_prev = '<c-k>'

" Use <C-j> for both expand and jump (make expand higher priority.)
imap <C-j> <Plug>(coc-snippets-expand-jump)

" Use <leader>x for convert visual selected code to snippet
xmap <leader>x  <Plug>(coc-convert-snippet)

function! s:open_explorer()
	CocCommand explorer
endfunction

" autocmd VimEnter * call <SID>open_explorer()
autocmd BufEnter * if (winnr("$") == 1 && &filetype == 'coc-explorer') | q | endif
" }

" }}}
